import { defaultRules, transformEscapESelector } from 'unplugin-transform-class/utils';
import { entriesToCss } from '@unocss/core';
import './shared/unocss-preset-weapp.7771df0e.mjs';
export { p as parseColor } from './shared/unocss-preset-weapp.3720715e.mjs';
import { r as rules } from './shared/unocss-preset-weapp.5a747ba5.mjs';
export { c as colors } from './shared/unocss-preset-weapp.a1c36880.mjs';
import { t as theme } from './shared/unocss-preset-weapp.3e5c03c8.mjs';
export { t as theme } from './shared/unocss-preset-weapp.3e5c03c8.mjs';
import { v as variants } from './shared/unocss-preset-weapp.114d758f.mjs';
import './shared/unocss-preset-weapp.fe58e32f.mjs';

const wxPrefix = "page";
const taroPrefix = "*";
const uniappPrefix = "uni-page-body";
function preflights(isH5, platform) {
  return [
    {
      layer: "preflights",
      getCSS(ctx) {
        if (ctx.theme.preflightBase) {
          const css = entriesToCss(Object.entries(ctx.theme.preflightBase));
          const preflights = `,::before,::after{${css}}::backdrop{${css}}`;
          if (isH5)
            return `${platform === "uniapp" ? uniappPrefix : taroPrefix}${preflights}`;
          else
            return `${wxPrefix}${preflights}`;
        }
      }
    }
  ];
}

function taroPxToRpx(size, designWidth, deviceRatio) {
  if (!(designWidth in deviceRatio))
    throw new Error(`deviceRatio \u914D\u7F6E\u4E2D\u4E0D\u5B58\u5728 ${designWidth} \u7684\u8BBE\u7F6E\uFF01`);
  return `${parseInt(size, 10) * deviceRatio[designWidth]}rpx`;
}
function taroRpxToPx(size, designWidth, deviceRatio) {
  if (!(designWidth in deviceRatio))
    throw new Error(`deviceRatio \u914D\u7F6E\u4E2D\u4E0D\u5B58\u5728 ${designWidth} \u7684\u8BBE\u7F6E\uFF01`);
  return parseInt(size, 10) / deviceRatio[designWidth];
}
function taroPxToRemW4(size, designWidth) {
  return `${Math.ceil(parseInt(size, 10) / 40 * 640 / designWidth * 1e5) / 1e5}rem`;
}
function taroPxToRemW5(size, designWidth, deviceRatio) {
  const baseFontSize = 20;
  const unitPrecision = 5;
  const rootValue = baseFontSize / deviceRatio[designWidth] * 2;
  const pixels = parseFloat(size);
  return `${toFixed(pixels / rootValue, unitPrecision)}rem`;
}
function toFixed(number, precision) {
  const multiplier = 10 ** (precision + 1);
  const wholeNumber = Math.floor(number * multiplier);
  return Math.round(wholeNumber / 10) * 10 / multiplier;
}

function uniAppRpxTransform(size) {
  return `%?${size}?%`;
}

const pxRE = /^-?[\.\d]+px$/;
const rpxRE = /^-?[\.\d]+rpx$/;
const rpxOrPxRE = /^-?[\.\d]+r?px$/;
const presetWeapp = (options = {}) => {
  options.dark = options.dark ?? "class";
  options.attributifyPseudo = options.attributifyPseudo ?? false;
  options.transform = options.transform ?? true;
  options.isH5 = options.isH5 ?? false;
  options.designWidth = options.designWidth ?? 750;
  options.deviceRatio = options.deviceRatio ?? {
    640: 2.34 / 2,
    750: 1,
    828: 1.81 / 2
  };
  options.platform = options.platform ?? "uniapp";
  options.taroWebpack = options.taroWebpack ?? "webpack4";
  options.transformRules = options.transformRules ?? defaultRules;
  return {
    name: "unocss-preset-weapp",
    theme: {
      ...theme,
      transformRules: options.transformRules
    },
    rules,
    variants: variants(options),
    options,
    postprocess(css) {
      if (options.transform)
        css.selector = transformEscapESelector(css.selector, options.transformRules);
      if (options.variablePrefix && options.variablePrefix !== "un-")
        VarPrefixPostprocessor(options.variablePrefix, css);
      if (options.platform === "taro") {
        if (options.isH5) {
          cssRpxTransform(
            css,
            (value) => {
              return rpxOrPxRE.test(value);
            },
            (value) => {
              const size = value.endsWith("rpx") ? taroRpxToPx(value.slice(0, -3), options.designWidth, options.deviceRatio) : value.slice(0, -2);
              return options.taroWebpack === "webpack4" ? taroPxToRemW4(size, options.designWidth) : taroPxToRemW5(size, options.designWidth, options.deviceRatio);
            }
          );
        } else {
          cssRpxTransform(
            css,
            (value) => {
              return pxRE.test(value);
            },
            (value) => {
              return taroPxToRpx(value.slice(0, -2), options.designWidth, options.deviceRatio);
            }
          );
        }
      }
      if (options.platform === "uniapp" && options.isH5) {
        css.entries.forEach((i) => {
          const value = i[1];
          if (value && typeof value === "string" && rpxRE.test(value))
            i[1] = `${uniAppRpxTransform(value.slice(0, -3))}`;
        });
      }
    },
    preflights: preflights(options.isH5, options.platform),
    prefix: options.prefix
  };
};
function VarPrefixPostprocessor(prefix, obj) {
  obj.entries.forEach((i) => {
    i[0] = i[0].replace(/^--un-/, `--${prefix}`);
    if (typeof i[1] === "string")
      i[1] = i[1].replace(/var\(--un-/g, `var(--${prefix}`);
  });
}
function cssRpxTransform(css, condition, transform) {
  css.entries.forEach((i) => {
    const value = i[1];
    if (value && typeof value === "string" && condition(value))
      i[1] = `${transform(value)}`;
  });
}

export { presetWeapp as default, presetWeapp, pxRE, rpxOrPxRE, rpxRE };
