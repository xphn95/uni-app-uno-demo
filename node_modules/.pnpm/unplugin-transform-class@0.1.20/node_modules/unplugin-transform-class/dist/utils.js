"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  defaultRules: () => defaultRules,
  escapeRegExp: () => escapeRegExp,
  restoreSelector: () => restoreSelector,
  transformCode: () => transformCode,
  transformEscapESelector: () => transformEscapESelector,
  transformSelector: () => transformSelector
});
module.exports = __toCommonJS(utils_exports);

// src/core/index.ts
var import_utils = require("@meoc/utils");
function getClass(code) {
  const matchs = [];
  Array.from(code.matchAll(/\s:?class="((?:\n|.)*?)"/g)).forEach((m) => {
    const classStr = m[1];
    const sourceStr = (0, import_utils.trim)(m[0]);
    let classArr = [sourceStr];
    if (sourceStr.startsWith(":")) {
      if (classStr.startsWith("{"))
        classArr = classArr.concat(getObjClass(classStr));
      else if (classStr.startsWith("["))
        classArr = classArr.concat(getArrClass(classStr));
    } else {
      classArr.push(classStr);
    }
    matchs.push(classArr);
  });
  Array.from(code.matchAll(/className=["']((?:\n|.)+?)["']/g)).forEach((m) => {
    matchs.push([m[0], m[1]]);
  });
  return matchs;
}
function getObjClass(className) {
  return Array.from(className.matchAll(/'([^,]+?)'\s*:/g)).map((v) => v[1]);
}
function getArrClass(className) {
  return Array.from(className.matchAll(/(?<=[\?\:])\s*'(.*?)'/g)).map((v) => v[1]);
}
function transformCode(code, rules = defaultRules) {
  const classNames = getClass(code);
  classNames.forEach((c) => {
    let currentClass = c[0];
    c.slice(1).forEach((selector) => {
      currentClass = currentClass.replace(selector, transformSelector(selector, rules));
    });
    code = code.replace(c[0], currentClass);
  });
  return code;
}

// src/utils.ts
var defaultRules = {
  ".": "-d-",
  "/": "-s-",
  ":": "-c-",
  "%": "-p-",
  "!": "-e-",
  "#": "-w-",
  "(": "-bl-",
  ")": "-br-",
  "[": "-fl-",
  "]": "-fr-",
  "$": "-r-",
  ",": "-co-"
};
var escapePrefix = "\\";
function escapeRegExp(str = "") {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function createTransformRegExp(rules) {
  return new RegExp(`[${escapeRegExp(Object.keys(rules).join(""))}]`);
}
function transformSelector(selector = "", rules = defaultRules) {
  const transformRegExp = createTransformRegExp(rules);
  if (transformRegExp.test(selector)) {
    for (const transformRule in rules) {
      const replaceReg = new RegExp(`${escapePrefix}${transformRule}`, "g");
      selector = selector.replace(replaceReg, rules[transformRule]);
    }
  }
  return selector;
}
function transformEscapESelector(selector = "", rules = defaultRules) {
  const transformRegExp = createTransformRegExp(rules);
  if (transformRegExp.test(selector)) {
    for (const transformRule in rules) {
      const replaceReg = new RegExp(escapeRegExp(`${escapePrefix}${transformRule}`), "g");
      selector = selector.replace(replaceReg, rules[transformRule]);
    }
  }
  return selector;
}
function restoreSelector(selector = "", rules = defaultRules) {
  for (const transformRule in rules) {
    const replaceReg = new RegExp(rules[transformRule], "g");
    selector = selector.replace(replaceReg, transformRule);
  }
  return selector;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultRules,
  escapeRegExp,
  restoreSelector,
  transformCode,
  transformEscapESelector,
  transformSelector
});
if (module.exports.default) module.exports = module.exports.default;