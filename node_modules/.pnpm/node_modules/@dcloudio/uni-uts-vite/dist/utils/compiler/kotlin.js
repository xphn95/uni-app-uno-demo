"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runKotlinDev = exports.runKotlinProd = exports.createKotlinResolveTypeReferenceName = void 0;
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const fast_glob_1 = require("fast-glob");
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const utils_1 = require("./utils");
function createKotlinResolveTypeReferenceName(_namespace, _ast) {
    return (name) => name;
}
exports.createKotlinResolveTypeReferenceName = createKotlinResolveTypeReferenceName;
function parseKotlinPackage(filename) {
    const res = (0, utils_1.resolvePackage)(filename);
    if (!res) {
        return { package: '' };
    }
    return {
        package: 'uts.sdk.' + (res.is_uni_modules ? 'modules.' : '') + res.name,
    };
}
async function runKotlinProd(filename) {
    // 文件有可能是 app-ios 里边的，因为编译到 android 时，为了保证不报错，可能会去读取 ios 下的 uts
    if (filename.includes('app-ios')) {
        return;
    }
    await compile(filename);
    (0, utils_1.genUTSPlatformResource)(filename, {
        inputDir: process.env.UNI_INPUT_DIR,
        outputDir: process.env.UNI_OUTPUT_DIR,
        platform: 'app-android',
        extname: '.kt',
    });
}
exports.runKotlinProd = runKotlinProd;
async function runKotlinDev(filename) {
    // 文件有可能是 app-ios 里边的，因为编译到 android 时，为了保证不报错，可能会去读取 ios 下的 uts
    if (filename.includes('app-ios')) {
        return;
    }
    await compile(filename);
    const kotlinFile = (0, utils_1.resolveUTSPlatformFile)(filename, {
        inputDir: process.env.UNI_INPUT_DIR,
        outputDir: process.env.UNI_OUTPUT_DIR,
        platform: 'app-android',
        extname: '.kt',
    });
    // 开发模式下，需要生成 dex
    if (fs_extra_1.default.existsSync(kotlinFile)) {
        const compilerServer = getCompilerServer();
        if (!compilerServer) {
            return;
        }
        const { getDefaultJar, getKotlincHome, compile } = compilerServer;
        // time = Date.now()
        const jarFile = resolveJarPath(kotlinFile);
        const options = {
            kotlinc: resolveKotlincArgs(kotlinFile, getKotlincHome(), getDefaultJar().concat(resolveLibs(filename))),
            d8: resolveD8Args(jarFile),
        };
        const res = await compile(options, process.env.UNI_INPUT_DIR);
        // console.log('dex compile time: ' + (Date.now() - time) + 'ms')
        if (res) {
            try {
                fs_extra_1.default.unlinkSync(jarFile);
                // 短期内先不删除，方便排查问题
                // fs.unlinkSync(kotlinFile)
            }
            catch (e) { }
            const dexFile = resolveDexFile(jarFile);
            if (fs_extra_1.default.existsSync(dexFile)) {
                return (0, uni_cli_shared_1.normalizePath)(path_1.default.relative(process.env.UNI_OUTPUT_DIR, dexFile));
            }
        }
    }
}
exports.runKotlinDev = runKotlinDev;
async function compile(filename) {
    if (!process.env.UNI_HBUILDERX_PLUGINS) {
        return;
    }
    const { bundle, UtsTarget } = (0, utils_1.getUtsCompiler)();
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    // let time = Date.now()
    await bundle(UtsTarget.KOTLIN, {
        input: {
            root: inputDir,
            filename,
        },
        output: {
            isPlugin: true,
            outDir: outputDir,
            package: parseKotlinPackage(filename).package,
            sourceMap: (0, uni_cli_shared_1.resolveSourceMapPath)(),
            extname: 'kt',
            imports: [
                'kotlinx.coroutines.async',
                'kotlinx.coroutines.CoroutineScope',
                'kotlinx.coroutines.Deferred',
                'kotlinx.coroutines.Dispatchers',
                'io.dcloud.uts.*',
            ],
            logFilename: true,
            noColor: (0, uni_cli_shared_1.isInHBuilderX)(),
        },
    });
}
function resolveKotlincArgs(filename, kotlinc, jars) {
    return [
        filename,
        '-cp',
        resolveClassPath(jars),
        '-d',
        resolveJarPath(filename),
        '-kotlin-home',
        kotlinc,
    ];
}
function resolveD8Args(filename) {
    return [
        filename,
        '--no-desugaring',
        '--min-api',
        '19',
        '--output',
        resolveDexPath(filename),
    ];
}
function resolveLibs(filename) {
    const libsPath = path_1.default.resolve((0, utils_1.resolveAndroidDir)(filename), 'libs');
    const libs = [];
    if (fs_extra_1.default.existsSync(libsPath)) {
        libs.push(...(0, fast_glob_1.sync)('*.jar', { cwd: libsPath, absolute: true }));
        const zips = (0, fast_glob_1.sync)('*.aar', { cwd: libsPath });
        zips.forEach((name) => {
            const outputPath = resolveAndroidArchiveOutputPath(name);
            if (!fs_extra_1.default.existsSync(outputPath)) {
                // 解压
                const zip = new adm_zip_1.default(path_1.default.resolve(libsPath, name));
                zip.extractAllTo(outputPath, true);
            }
        });
        if (zips.length) {
            libs.push(...(0, fast_glob_1.sync)('*/*.jar', {
                cwd: resolveAndroidArchiveOutputPath(),
                absolute: true,
            }));
        }
    }
    return libs;
}
function resolveAndroidArchiveOutputPath(aar) {
    return path_1.default.resolve(process.env.UNI_OUTPUT_DIR, '../.uts/aar', aar ? aar.replace('.aar', '') : '');
}
function resolveDexFile(jarFile) {
    return (0, uni_cli_shared_1.normalizePath)(path_1.default.resolve(path_1.default.dirname(jarFile), 'classes.dex'));
}
function resolveDexPath(filename) {
    return path_1.default.dirname(filename);
}
function resolveJarPath(filename) {
    return filename.replace(path_1.default.extname(filename), '.jar');
}
function resolveClassPath(jars) {
    return jars.join(os_1.default.platform() === 'win32' ? ';' : ':');
}
const getCompilerServer = () => {
    try {
        const compilerServerPath = path_1.default.resolve(process.env.UNI_HBUILDERX_PLUGINS, 'uniapp-runextension/out/main.js');
        // eslint-disable-next-line no-restricted-globals
        return require(compilerServerPath);
    }
    catch (e) {
        (0, uni_cli_shared_1.installHBuilderXPlugin)('uniapp-runextension');
    }
    return false;
};
