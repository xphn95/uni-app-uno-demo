/**
 * 移除数组中的某个元素
 * @param arr - 数组
 * @param el - 元素
 */
declare const removeAt: <T>(arr: T[], el: T) => void;
/**
 * 将值插入到指定索引之后
 * @param arr - 数组
 * @param index - 索引
 * @param v - 值
 * @example
 * let otherArray = [2, 10];
 * insertAt(otherArray, 0, 4, 6, 8); // otherArray = [2, 4, 6, 8, 10]
 */
declare const insertAt: <T>(arr: T[], index: number, ...v: T[]) => T[];
/**
 * 返回数组中的最后一个元素
 * @param arr - 数组
 * @example
 * last([1, 2, 3]); // 3
 * last([]); // undefined
 * last(null); // undefined
 * last(undefined); // undefined
 */
declare const last: <T>(arr: T[]) => T | undefined;
/**
 * 返回数组中的最后 n 个元素
 * @param arr - 数组
 * @param n - 索引
 * @example lastN(['a', 'b', 'c', 'd'], 2); // ['c', 'd']
 */
declare const lastN: <T>(arr: T[], n: number) => T[];
/**
 * 布尔全等判断
 * @param arr - 数组
 * @param fn - 判断函数
 * @example all([4, 2, 3], x => x > 1) => true
 */
declare function all(arr: unknown[], fn?: BooleanConstructor): boolean;
/**
 * 检查数组各项相等
 * @param arr - 数组
 * @example allEqual([4, 2, 3]) => false
 * @example allEqual([4, 4, 4]) => true
 */
declare function allEqual(arr: unknown[]): boolean;

/**
 * 深度拷贝对象
 * @param  obj - 对象
 * @returns 拷贝的对象
 */
declare function clone(obj: object): object;
/**
 * 清除对象中 undefined,null,[]空数组
 * @param  obj - 对象
 * @returns 清除后的对象
 */
declare function clearNull(obj: any): any;
declare const hasOwn: (val: object, key: string | symbol) => key is never;
declare const objectToString: () => string;
/**
 * 对象类型
 * @param value - 对象
 */
declare const toTypeString: (value: unknown) => string;
/**
 * 比较一个值是否改变
 * @param value - 对象
 * @param oldValue - 对象
 *
 */
declare const hasChanged: (value: any, oldValue: any) => boolean;

/**
 * Function
 */
declare type Fn<T = void> = () => T;

/**
 * 睡眠
 * @param ms - 毫秒数
 * @param callback - 回调函数
 */
declare function sleep(ms: number, callback?: Fn<any>): Promise<void>;

/**
 * 驼峰化
 * @param str - 字符串
 * @example user-info => userInfo
 */
declare const camelize: (str: string) => string;
/**
 * 将字符串转换为 pascal
 * @param str - 字符串
 * @example
 * user-info => UserInfo
 * some_database_field_name => SomeDatabaseFieldName
 * Some label that needs to be pascalized => SomeLabelThatNeedsToBePascalized
 * some-mixed_string with spaces_underscores-and-hyphens => SomeMixedStringWithSpacesUnderscoresAndHyphens
 */
declare const toPascalCase: (str: string) => string;
/**
 * 将字符串转换为 camel
 * @param str
 * @example hello-world => helloWorld
 * @example hello_world => helloWorld
 * @example hello world => helloWorld
 */
declare const toCamelCase: (str: string) => string;
/**
 * 将字符串转换为 kebab
 * @param str
 * @example helloWorld => hello-world
 * @example hello_world => hello-world
 * @example hello world => hello-world
 */
declare const toKebabCase: (str: string) => string;
/**
 * 将字符串转换为 snake
 * @param str
 * @example helloWorld => hello_world
 * @example hello_world => hello_world
 * @example hello world => hello_world
 */
declare const toSnakeCase: (str: string) => string;
/**
 * 字符数组
 * @param s
 * @example hello => ['h', 'e', 'l', 'l', 'o']
 */
declare const toCharArray: (s: string) => string[];
/**
 * 首字母大写
 * @param str - 字符串
 * @example userInfo => UserInfo
 */
declare const capitalize: (str: string) => string;
/**
 * 大写字母 转为 小写-连接
 * @param str - 字符串
 * @example UserInfo => user-info
 */
declare const hyphenate: (str: string) => string;
/**
 * 替换所有相同字符串
 * @param text - 需要处理的字符串
 * @param repstr - 被替换的字符
 * @param newstr - 替换后的字符
 */
declare function replaceAll(text: string, repstr: string, newstr: string): string;
/**
 * @desc 去左右空格
 * @param value - 需要处理的字符串
 */
declare function trim(value: string): string;
/**
 * @desc 去所有空格
 * @param value - 需要处理的字符串
 */
declare function trimAll(value: string): string;
/**
 * 根据数字获取对应的汉字
 * @param num - 数字(0-10)
 */
declare function getHanByNumber(num: number): string;
/**
 * 插入字符串
 * @param str - 原字符串
 * @param start - 插入位置
 * @param insertStr - 插入字符串
 */
declare function insertStr(str: string, start: number, insertStr: string): string;
/**
 * 转义HTML字符
 * @param str - 字符串
 * @example '<a href="#">Me & you</a>' => '&lt;a href="#"&gt;Me &amp; you&lt;/a&gt;'
 */
declare function escapeHTML(str: string): string;
/**
 * 移除空格
 * @param str - 字符串
 * @example '  Hello  \nWorld  ' => 'Hello World'
 */
declare const removeWhitespace: (str: string) => string;

/**
 * 对比 version 的版本号
 * @param v1 - 版本号1
 * @param v2 - 版本号2
 * @returns -1: v1 < v2; 0: v1 = v2; 1: v1 > v2
 */
declare function compareVersion(v1: string, v2: string): number;

declare enum FormatType {
    toMinute = "YYYY-MM-DD HH:mm",
    toHour = "YYYY-MM-DD HH",
    toDay = "YYYY-MM-DD",
    toMonth = "YYYY-MM",
    year = "YYYY",
    toSecond = "YYYY-MM-DD HH:mm:ss"
}
declare type DateFormat = FormatType | string;
declare type IDate = Date | string;
/**
 * 格式化日期
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD HH:mm
 */
declare function formatDate(date?: IDate, format?: DateFormat): string;
/**
 * 获取当前时间
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getNow(format?: DateFormat): string;
/**
 * 获取月第一天
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getFirstDayOfMonth(date?: IDate, format?: DateFormat): string;
/**
 * 获取月最后一天
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getLastDayOfMonth(date?: IDate, format?: DateFormat): string;
/**
 * 获取整月
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysOfMonth(date?: IDate, format?: DateFormat): string[];
/**
 * 获取上个月
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysOfLastMonth(format?: FormatType): string[];
/**
 * 获取月第一天 到 现在
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysToNowOfMonth(date?: IDate, format?: FormatType): string[];
/**
 * 获取年第一天
 * @param date - 日期 默认为当年
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function getFirstDayOfYear(date?: IDate, format?: FormatType): string;
/**
 * 本周
 */
declare function getDaysOfWeek(format?: FormatType): string[];
/**
 * d2是否在d1之后
 * @param d1 - 日期1
 * @param d2 - 日期2 默认为当前时间
 */
declare function isAfter(d1: IDate, d2?: IDate): boolean;
/**
 * d2是否在d1之前
 * @param d1 - 日期1
 * @param d2 - 日期2 默认为当前时间
 */
declare function isBefore(d1: IDate, d2?: IDate): boolean;
/**
 * d3是否在d1与d2之间
 * @param d1 - 日期1
 * @param d2 - 日期2
 * @param d3 - 日期3 默认为当前时间
 * @returns
 */
declare function isBetween(d1: IDate, d2: IDate, d3?: IDate): boolean;
/**
 * 加几天
 * @param days - 天数 默认为1
 * @param d - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function addDays(days?: number, d?: IDate, format?: FormatType): IDate;
/**
 * 减几天
 * @param days - 天数 默认为1
 * @param d - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function subDays(days?: number, d?: IDate, format?: FormatType): IDate;
/**
 * 转换成 Date
 */
declare function toDate(date: string | string[]): Date | Date[];

/**
 * 转义字符串以在正则表达式中使用
 * @param string - 要转义的字符串
 * @returns
 */
declare function escapeRegExp(string: string): string;

/**
 * 转为数字
 * @param val - 值
 * @returns
 */
declare const toNumber: (val: any) => any;

declare function isArray(obj: any): boolean;
declare const isMap: (val: unknown) => val is Map<any, any>;
declare const isSet: (val: unknown) => val is Set<any>;
declare const isString: (val: unknown) => val is string;
declare const isDate: (val: unknown) => val is Date;
declare const isFunction: (val: unknown) => val is Function;
declare const isSymbol: (val: unknown) => val is symbol;
declare const isObject: (val: unknown) => val is Record<any, any>;
declare const isPromise: <T = any>(val: unknown) => val is Promise<T>;
declare const isNumber: (val: any) => val is number;
declare const isNull: (val: unknown) => val is null;
declare const isUndefined: (val: unknown) => val is undefined;
declare const isRegExp: (val: unknown) => val is RegExp;
declare const isFile: (val: unknown) => val is File;
/**
 * 是否为纯粹的对象
 * isObject([]) 是 true ，因为 type [] 为 'object'
 * isPlainObject([]) 则是false
 */
declare const isPlainObject: (val: unknown) => val is object;
declare function isUndef(v: unknown): boolean;
/**
 * 是否为空字符串
 */
declare function isEmptyString(v: unknown): boolean;
/**
 * 是否为空
 * @example isEmpty(null) // true
 * @example isEmpty(undefined) // true
 * @example isEmpty('') // true
 * @example isEmpty([]) // true
 * @example isEmpty({}) // true
 * @example isEmpty(' ') // false
 * @example isEmpty(123) // true
 */
declare function isEmpty(val: any): boolean;

/**
 * 执行数组里的函数
 */
declare const invokeArrayFns: (fns: Function[], arg?: any) => void;
/**
 * Nano version of string hash
 * @param str - 字符串
 * @returns foo => 193420387
 */
declare const stringHash: (str: string) => number;
/**
 * uuid
 */
declare const uuid: () => string;
/**
 * nanoid
 * @param alphabet - 字符串
 * @param defaultSize - 长度
 */
declare const nanoid: (defaultSize?: number, alphabet?: string) => string;
/**
 * 手机号码中间4位隐藏星号
 * @param mobile - 手机号
 * @returns 138****8888
 */
declare function hideMobile(mobile: string): string;
/**
 * 键值对拼接成URL参数
 * @param obj - 键值对
 * @returns a=1&b=2
 */
declare const params2Url: (obj: Object) => string;
/**
 * 将总秒数转换成 时:分:秒
 * @param seconds - 秒
 */
declare const seconds2Time: (seconds: number) => string;
/**
 * 将总秒数转换成 日:时:分:秒
 * @param seconds - 秒
 */
declare const seconds2DayTime: (seconds: number) => string;
/**
 * 下载文件
 * @param link - 文件链接
 * @param name - 文件名
 * @example downloadFile('http://www.baidu.com/img/bd_logo1.png', 'logo.png')
 */
declare function download(link: string, name?: string): void;
/**
 * 浏览器下载静态文件
 * @param name - 文件名
 * @param content - 文件内容 blob
 * @example downloadFile('1.json',JSON.stringify({name:'hahahha'}))
 * @example downloadFile('1.json',new Blob([ data ]))
 */
declare function downloadFile(name: string, content: any): void;

interface IImageVerifyOptions {
    /**
     * canvas dom 对象
     */
    dom: HTMLCanvasElement;
    /**
     * canvas宽度
     */
    width: number;
    /**
     * canvas高度
     */
    height: number;
    /**
     * 验证码
     * @default: 随机生成
     */
    code: string;
}
/**
 * 绘制图形验证码
 * @returns 随机验证码
 */
declare function drawImageVerify({ dom, width, height, code }: IImageVerifyOptions): string;

/**
 * rgb转hex
 * @param r - 红色
 * @param g - 绿色
 * @param b - 蓝色
 * @returns
 */
declare function rgbToHex(r: string | number, g: string | number, b: string | number): string;
declare function toHex(n: string | number): string;
/**
 * 十六进制颜色转RGB颜色
 * @param hex 颜色值 #333 或 #333333
 */
declare function hexToRGB(hex: string): {
    r: number;
    g: number;
    b: number;
} | null;

/**
 * 随机十六进制颜色
 * @returns #e34155
 */
declare function randomHexColorCode(): string;
/**
 * 随机 rgb 颜色
 * @param min - 最小值
 * @param max - 最大值
 * @returns
 */
declare function randomRgbColor(min?: number, max?: number): string;
/**
 * 随机布尔值
 * @returns true or false
 */
declare function randomBoolean(): boolean;
/**
 * 生成指定范围的随机整数
 * @param min - 最小值
 * @param max - 最大值
 * @returns (0,5) => 3
 */
declare function randomIntegerInRange(min: number, max: number): number;
/**
 * 生成指定范围的随机小数
 * @param min - 最小值
 * @param max - 最大值
 * @returns (0,5) => 3.0211363285087005
 */
declare function randomNumberInRange(min: number, max: number): number;

export { FormatType, addDays, all, allEqual, camelize, capitalize, clearNull, clone, compareVersion, download, downloadFile, drawImageVerify, escapeHTML, escapeRegExp, formatDate, getDaysOfLastMonth, getDaysOfMonth, getDaysOfWeek, getDaysToNowOfMonth, getFirstDayOfMonth, getFirstDayOfYear, getHanByNumber, getLastDayOfMonth, getNow, hasChanged, hasOwn, hexToRGB, hideMobile, hyphenate, insertAt, insertStr, invokeArrayFns, isAfter, isArray, isBefore, isBetween, isDate, isEmpty, isEmptyString, isFile, isFunction, isMap, isNull, isNumber, isObject, isPlainObject, isPromise, isRegExp, isSet, isString, isSymbol, isUndef, isUndefined, last, lastN, nanoid, objectToString, params2Url, randomBoolean, randomHexColorCode, randomIntegerInRange, randomNumberInRange, randomRgbColor, removeAt, removeWhitespace, replaceAll, rgbToHex, seconds2DayTime, seconds2Time, sleep, stringHash, subDays, toCamelCase, toCharArray, toDate, toHex, toKebabCase, toNumber, toPascalCase, toSnakeCase, toTypeString, trim, trimAll, uuid };
