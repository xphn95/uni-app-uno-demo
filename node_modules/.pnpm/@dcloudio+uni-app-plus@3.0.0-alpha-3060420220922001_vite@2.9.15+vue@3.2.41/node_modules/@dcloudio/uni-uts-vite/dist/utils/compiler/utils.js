"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResolveTypeReferenceName = exports.resolveUTSPlatformFile = exports.resolveAndroidDir = exports.genUTSPlatformResource = exports.resolvePackage = exports.getUtsCompiler = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const shared_1 = require("@vue/shared");
function getUtsCompiler() {
    // eslint-disable-next-line no-restricted-globals
    return require('@dcloudio/uts');
}
exports.getUtsCompiler = getUtsCompiler;
function resolvePackage(filename) {
    const parts = (0, uni_cli_shared_1.normalizePath)(filename).split('/');
    const isUniModules = parts.includes('uni_modules');
    const index = isUniModules
        ? parts.findIndex((part) => part === 'uni_modules')
        : parts.findIndex((part) => part === 'utssdk');
    if (index > -1) {
        const name = (0, shared_1.camelize)(parts[index + 1]);
        return {
            is_uni_modules: isUniModules,
            name,
            namespace: 'UTSSDK' + (isUniModules ? 'Modules' : '') + (0, shared_1.capitalize)(name),
        };
    }
}
exports.resolvePackage = resolvePackage;
function genUTSPlatformResource(filename, options) {
    const platformFile = resolveUTSPlatformFile(filename, options);
    const { platform } = options;
    const utsInputDir = resolveUTSPlatformDir(filename, platform);
    const utsOutputDir = resolveUTSPlatformDir(platformFile, platform);
    // 拷贝所有非uts文件及目录
    if (fs_extra_1.default.existsSync(utsInputDir)) {
        fs_extra_1.default.copySync(utsInputDir, utsOutputDir, {
            filter(src) {
                return path_1.default.extname(src) !== '.uts';
            },
        });
    }
    // 生产模式下，需要将生成的平台文件转移到 src 下
    const srcDir = path_1.default.resolve(utsOutputDir, 'src');
    if (!fs_extra_1.default.existsSync(srcDir)) {
        fs_extra_1.default.mkdirSync(srcDir);
    }
    if (fs_extra_1.default.existsSync(platformFile)) {
        fs_extra_1.default.moveSync(platformFile, path_1.default.resolve(utsOutputDir, 'src/index' + options.extname));
    }
}
exports.genUTSPlatformResource = genUTSPlatformResource;
function resolveAndroidDir(filename) {
    return resolveUTSPlatformDir(filename, 'app-android');
}
exports.resolveAndroidDir = resolveAndroidDir;
function resolveUTSPlatformDir(filename, platform) {
    const maybePlatformDir = path_1.default.dirname(filename);
    // 如果是根目录的 index.uts，需要定向到真正的平台目录
    const isRootIndex = path_1.default.basename(maybePlatformDir) !== platform;
    if (isRootIndex) {
        if (maybePlatformDir.includes('uni_modules')) {
            return path_1.default.join(maybePlatformDir, 'utssdk/' + platform);
        }
        return path_1.default.join(maybePlatformDir, platform);
    }
    return maybePlatformDir;
}
function resolveUTSPlatformFile(filename, { inputDir, outputDir, platform, extname }) {
    let platformFile = path_1.default
        .resolve(outputDir, path_1.default.relative(inputDir, filename))
        .replace(path_1.default.extname(filename), extname);
    const maybeModuleDir = path_1.default.dirname(filename);
    // 如果是根目录的 index.uts 编译出来的 index.kt，则移动到平台目录下
    const isRootIndex = path_1.default.basename(maybeModuleDir) !== platform;
    if (isRootIndex) {
        if (fs_extra_1.default.existsSync(platformFile)) {
            const newPlatformFile = path_1.default.resolve(path_1.default.dirname(platformFile), (maybeModuleDir.includes('uni_modules') ? 'utssdk/' : '') +
                platform +
                '/index' +
                extname);
            fs_extra_1.default.moveSync(platformFile, newPlatformFile);
            platformFile = newPlatformFile;
        }
    }
    return platformFile;
}
exports.resolveUTSPlatformFile = resolveUTSPlatformFile;
function resolveTypeAliasDeclNames(items) {
    const names = [];
    items.forEach((item) => {
        if (item.type === 'TsTypeAliasDeclaration') {
            names.push(item.id.value);
        }
    });
    return names;
}
function createResolveTypeReferenceName(namespace, ast) {
    const names = resolveTypeAliasDeclNames(ast.body);
    return (name) => {
        if (names.includes(name)) {
            return namespace + (0, shared_1.capitalize)(name);
        }
        return name;
    };
}
exports.createResolveTypeReferenceName = createResolveTypeReferenceName;
