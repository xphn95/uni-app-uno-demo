"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runSwiftDev = exports.runSwiftProd = void 0;
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const shared_1 = require("@vue/shared");
const utils_1 = require("./utils");
function parseSwiftPackage(filename) {
    const res = (0, utils_1.resolvePackage)(filename);
    if (!res) {
        return {
            namespace: '',
        };
    }
    const namespace = 'UTSSDK' + (res.is_uni_modules ? 'Modules' : '') + (0, shared_1.capitalize)(res.name);
    return {
        namespace,
    };
}
async function runSwiftProd(filename) {
    // 文件有可能是 app-android 里边的，因为编译到 ios 时，为了保证不报错，可能会去读取 android 下的 uts
    if (filename.includes('app-android')) {
        return;
    }
    await compile(filename);
    (0, utils_1.genUTSPlatformResource)(filename, {
        inputDir: process.env.UNI_INPUT_DIR,
        outputDir: process.env.UNI_OUTPUT_DIR,
        platform: 'app-ios',
        extname: '.swift',
    });
}
exports.runSwiftProd = runSwiftProd;
async function runSwiftDev(_filename) { }
exports.runSwiftDev = runSwiftDev;
async function compile(filename) {
    if (!process.env.UNI_HBUILDERX_PLUGINS) {
        return;
    }
    const { bundle, UtsTarget } = (0, utils_1.getUtsCompiler)();
    const inputDir = process.env.UNI_INPUT_DIR;
    const outputDir = process.env.UNI_OUTPUT_DIR;
    // let time = Date.now()
    await bundle(UtsTarget.SWIFT, {
        input: {
            root: inputDir,
            filename,
        },
        output: {
            isPlugin: true,
            outDir: outputDir,
            package: parseSwiftPackage(filename).namespace,
            sourceMap: (0, uni_cli_shared_1.resolveSourceMapPath)(),
            extname: 'swift',
            imports: ['DCUTSPlugin'],
            logFilename: true,
            noColor: (0, uni_cli_shared_1.isInHBuilderX)(),
        },
    });
}
