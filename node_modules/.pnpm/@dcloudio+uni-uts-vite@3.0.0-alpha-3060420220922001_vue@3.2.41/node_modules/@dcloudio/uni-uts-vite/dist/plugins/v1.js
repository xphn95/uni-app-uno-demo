"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniUtsV1Plugin = void 0;
const path_1 = __importDefault(require("path"));
const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
const compiler_1 = require("../utils/compiler");
const utils_1 = require("../utils/compiler/utils");
const code_1 = require("../utils/compiler/code");
const UTSProxyRE = /\?uts-proxy$/;
function isUTSProxy(id) {
    return UTSProxyRE.test(id);
}
function uniUtsV1Plugin() {
    let isFirst = true;
    return {
        name: 'uni:uts-v1',
        apply: 'build',
        enforce: 'pre',
        resolveId(id, importer) {
            const module = (0, uni_cli_shared_1.resolveUtsAppModule)(id, importer ? path_1.default.dirname(importer) : process.env.UNI_INPUT_DIR);
            if (module) {
                // prefix the polyfill id with \0 to tell other plugins not to try to load or transform it
                return '\0' + module + '?uts-proxy';
            }
        },
        load(id) {
            if (isUTSProxy(id)) {
                return '';
            }
        },
        async transform(code, id, opts) {
            if (opts && opts.ssr) {
                return;
            }
            if (!isUTSProxy(id)) {
                return;
            }
            const { filename: module } = (0, uni_cli_shared_1.parseVueRequest)(id.replace('\0', ''));
            const pkg = (0, utils_1.resolvePackage)(module);
            if (!pkg) {
                return;
            }
            code = await (0, compiler_1.genProxyCode)(module, pkg);
            if (process.env.NODE_ENV !== 'development') {
                // 生产模式 支持同时生成 android 和 ios 的 uts 插件
                if (process.env.UNI_UTS_PLATFORM === 'app-android' ||
                    process.env.UNI_UTS_PLATFORM === 'app') {
                    const filename = (0, code_1.resolvePlatformIndex)('app-android', module, pkg) ||
                        (0, code_1.resolveRootIndex)(module);
                    if (filename) {
                        await (0, compiler_1.getCompiler)('kotlin').runProd(filename);
                    }
                }
                if (process.env.UNI_UTS_PLATFORM === 'app-ios' ||
                    process.env.UNI_UTS_PLATFORM === 'app') {
                    const filename = (0, code_1.resolvePlatformIndex)('app-ios', module, pkg) ||
                        (0, code_1.resolveRootIndex)(module);
                    if (filename) {
                        await (0, compiler_1.getCompiler)('swift').runProd(filename);
                    }
                }
            }
            else {
                // dev 模式仅 android 支持
                if (process.env.UNI_UTS_PLATFORM === 'app-android') {
                    const filename = (0, code_1.resolvePlatformIndex)('app-android', module, pkg) ||
                        (0, code_1.resolveRootIndex)(module);
                    if (filename) {
                        const res = await (0, compiler_1.getCompiler)('kotlin').runDev(filename);
                        if (!isFirst && res) {
                            const files = [];
                            if (process.env.UNI_APP_CHANGED_DEX_FILES) {
                                try {
                                    files.push(...JSON.parse(process.env.UNI_APP_CHANGED_DEX_FILES));
                                }
                                catch (e) { }
                            }
                            files.push(res);
                            process.env.UNI_APP_CHANGED_DEX_FILES = JSON.stringify([
                                ...new Set(files),
                            ]);
                        }
                    }
                }
            }
            return code;
        },
        buildEnd() {
            isFirst = false;
        },
    };
}
exports.uniUtsV1Plugin = uniUtsV1Plugin;
