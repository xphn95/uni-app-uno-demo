'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const utils = require('unplugin-attributify-to-class/utils');
const utils$1 = require('unplugin-transform-class/utils');
const pluginutils = require('@rollup/pluginutils');

function transformerClass(options = {}) {
  const idFilter = pluginutils.createFilter(
    options.include || [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  return {
    name: "transformer-applet-class",
    idFilter,
    enforce: "pre",
    transform(code) {
      const newCode = utils$1.transformCode(code.toString(), options.transformRules);
      code.overwrite(0, code.original.length, newCode);
    }
  };
}

function transformerWeAttributify(options = {}) {
  const idFilter = pluginutils.createFilter(
    options.include || [/\.vue$/, /\.vue\?vue/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  const extractor = utils.extractorAttributify(options);
  return {
    name: "transformer-applet-attributify",
    idFilter,
    enforce: "pre",
    transform(code) {
      const newCode = extractor(code.toString());
      code.overwrite(0, code.original.length, newCode);
    }
  };
}

exports.defaultAttributes = utils.defaultAttributes;
exports.defaultIgnoreNonValuedAttributes = utils.defaultIgnoreNonValuedAttributes;
exports.transformerAttributify = transformerWeAttributify;
exports.transformerClass = transformerClass;
