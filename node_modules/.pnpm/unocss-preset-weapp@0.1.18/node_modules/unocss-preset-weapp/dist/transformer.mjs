import { extractorAttributify } from 'unplugin-attributify-to-class/utils';
export { defaultAttributes, defaultIgnoreNonValuedAttributes } from 'unplugin-attributify-to-class/utils';
import { transformCode } from 'unplugin-transform-class/utils';
import { createFilter } from '@rollup/pluginutils';

function transformerClass(options = {}) {
  const idFilter = createFilter(
    options.include || [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  return {
    name: "transformer-applet-class",
    idFilter,
    enforce: "pre",
    transform(code) {
      const newCode = transformCode(code.toString(), options.transformRules);
      code.overwrite(0, code.original.length, newCode);
    }
  };
}

function transformerWeAttributify(options = {}) {
  const idFilter = createFilter(
    options.include || [/\.vue$/, /\.vue\?vue/],
    options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]
  );
  const extractor = extractorAttributify(options);
  return {
    name: "transformer-applet-attributify",
    idFilter,
    enforce: "pre",
    transform(code) {
      const newCode = extractor(code.toString());
      code.overwrite(0, code.original.length, newCode);
    }
  };
}

export { transformerWeAttributify as transformerAttributify, transformerClass };
